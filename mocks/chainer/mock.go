// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/deadcheat/pedigree/chainer (interfaces: Chainable,Executable)

package chainer

import (
	chainer "github.com/deadcheat/pedigree/chainer"
	gomock "github.com/golang/mock/gomock"
)

// Mock of Chainable interface
type MockChainable struct {
	ctrl     *gomock.Controller
	recorder *_MockChainableRecorder
}

// Recorder for MockChainable (not exported)
type _MockChainableRecorder struct {
	mock *MockChainable
}

func NewMockChainable(ctrl *gomock.Controller) *MockChainable {
	mock := &MockChainable{ctrl: ctrl}
	mock.recorder = &_MockChainableRecorder{mock}
	return mock
}

func (_m *MockChainable) EXPECT() *_MockChainableRecorder {
	return _m.recorder
}

func (_m *MockChainable) Add(_param0 chainer.Executable) {
	_m.ctrl.Call(_m, "Add", _param0)
}

func (_mr *_MockChainableRecorder) Add(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Add", arg0)
}

func (_m *MockChainable) Next() error {
	ret := _m.ctrl.Call(_m, "Next")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockChainableRecorder) Next() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Next")
}

// Mock of Executable interface
type MockExecutable struct {
	ctrl     *gomock.Controller
	recorder *_MockExecutableRecorder
}

// Recorder for MockExecutable (not exported)
type _MockExecutableRecorder struct {
	mock *MockExecutable
}

func NewMockExecutable(ctrl *gomock.Controller) *MockExecutable {
	mock := &MockExecutable{ctrl: ctrl}
	mock.recorder = &_MockExecutableRecorder{mock}
	return mock
}

func (_m *MockExecutable) EXPECT() *_MockExecutableRecorder {
	return _m.recorder
}

func (_m *MockExecutable) Execute(_param0 chainer.Chainable, _param1 interface{}) error {
	ret := _m.ctrl.Call(_m, "Execute", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockExecutableRecorder) Execute(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Execute", arg0, arg1)
}
